name: Code Analysis & Reporting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly code analysis on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  # 🔍 Code Quality Analysis
  sonarcloud-analysis:
    name: 🔍 SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: 🧪 Run tests with coverage
      run: |
        npm run test:coverage || echo "Coverage tests not configured yet"
    
    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🔒 Security Analysis
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔒 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    
    - name: 🏗️ Build for analysis
      run: |
        cd client
        npm ci
        npm run build
    
    - name: 🔒 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: 🛡️ Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: 📊 Upload security results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # 📈 Performance Analysis
  performance-analysis:
    name: 📈 Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: 🏗️ Build application
      run: |
        cd client
        npm run build
    
    - name: 📊 Bundle size analysis
      run: |
        cd client
        npx bundlesize --enable-github-checks
    
    - name: 🚀 Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        uploadDir: './client/build'
        configPath: './lighthouserc.json'
    
    - name: 📈 Web Vitals Check
      run: |
        cd client
        npx serve -s build -p 3000 &
        sleep 5
        npx web-vitals-cli http://localhost:3000 --output json > web-vitals-report.json
    
    - name: 📤 Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          ./client/web-vitals-report.json
          ./client/build/static/js/*.js.map

  # 🧹 Code Quality Metrics
  code-metrics:
    name: 🧹 Code Quality Metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: 📊 ESLint Report Generation
      run: |
        npm run lint -- --format=json --output-file=eslint-report.json || true
        npm run lint -- --format=html --output-file=eslint-report.html || true
    
    - name: 🎯 Code Complexity Analysis
      run: |
        npx plato -r -d complexity-report client/src server
    
    - name: 📏 Code Coverage Report
      run: |
        npm run test:coverage || echo "Coverage not configured"
        
    - name: 📊 TypeScript Compilation Report
      run: |
        cd client
        npx tsc --noEmit --listFiles > ../typescript-compilation.log 2>&1 || true
    
    - name: 📤 Upload code metrics
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics-${{ github.sha }}
        path: |
          eslint-report.json
          eslint-report.html
          complexity-report/
          typescript-compilation.log

  # 🐛 Dependency Vulnerability Scan
  dependency-analysis:
    name: 🐛 Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 🔍 NPM Audit
      run: |
        echo "📊 Root dependencies audit:"
        npm audit --json > npm-audit-root.json || true
        
        echo "📊 Client dependencies audit:"
        cd client
        npm audit --json > ../npm-audit-client.json || true
        
        echo "📊 Server dependencies audit:"
        cd ../server
        npm audit --json > ../npm-audit-server.json || true
    
    - name: 📊 License Compliance Check
      run: |
        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --json > license-report.json || true
    
    - name: 🔄 Dependency Graph Analysis
      run: |
        npm ls --json > dependency-tree.json || true
        cd client && npm ls --json > ../dependency-tree-client.json || true
        cd ../server && npm ls --json > ../dependency-tree-server.json || true
    
    - name: 📤 Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports-${{ github.sha }}
        path: |
          npm-audit-*.json
          license-report.json
          dependency-tree*.json

  # 📊 Weekly Comprehensive Report
  weekly-report:
    name: 📊 Weekly Comprehensive Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [sonarcloud-analysis, security-analysis, performance-analysis, code-metrics, dependency-analysis]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📊 Generate comprehensive report
      run: |
        mkdir -p weekly-report
        
        echo "# 📊 Weekly Code Analysis Report" > weekly-report/README.md
        echo "Generated on: $(date)" >> weekly-report/README.md
        echo "" >> weekly-report/README.md
        
        echo "## 🎯 Summary" >> weekly-report/README.md
        echo "- **Code Quality**: ✅ Analyzed with SonarCloud" >> weekly-report/README.md
        echo "- **Security**: 🔒 Scanned with CodeQL and Snyk" >> weekly-report/README.md
        echo "- **Performance**: 📈 Analyzed with Lighthouse CI" >> weekly-report/README.md
        echo "- **Dependencies**: 🐛 Vulnerability scan completed" >> weekly-report/README.md
        echo "" >> weekly-report/README.md
        
        echo "## 📈 Trends" >> weekly-report/README.md
        echo "- Lines of code: $(find client/src server -name '*.js' -o -name '*.jsx' | xargs wc -l | tail -1 | awk '{print $1}')" >> weekly-report/README.md
        echo "- Number of files: $(find client/src server -name '*.js' -o -name '*.jsx' | wc -l)" >> weekly-report/README.md
        echo "- Dependencies: $(cat package.json client/package.json server/package.json | grep -c '\".*\":' || echo 'N/A')" >> weekly-report/README.md
        echo "" >> weekly-report/README.md
        
        echo "## 🔗 Related Links" >> weekly-report/README.md
        echo "- [GitHub Repository](https://github.com/${{ github.repository }})" >> weekly-report/README.md
        echo "- [GitHub Actions](https://github.com/${{ github.repository }}/actions)" >> weekly-report/README.md
        echo "- [Security Advisories](https://github.com/${{ github.repository }}/security/advisories)" >> weekly-report/README.md
    
    - name: 📧 Create Issue with Report
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const reportContent = fs.readFileSync('weekly-report/README.md', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📊 Weekly Code Analysis Report - ${new Date().toISOString().split('T')[0]}`,
            body: reportContent,
            labels: ['report', 'analysis', 'weekly']
          });

  # 📊 Analysis Summary
  analysis-summary:
    name: 📊 Analysis Summary
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, security-analysis, performance-analysis, code-metrics, dependency-analysis]
    if: always()
    
    steps:
    - name: 📊 Generate analysis summary
      run: |
        echo "## 📊 Code Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Analysis Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 SonarCloud | ${{ needs.sonarcloud-analysis.result }} | Code quality and maintainability |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security | ${{ needs.security-analysis.result }} | CodeQL + Snyk vulnerability scan |" >> $GITHUB_STEP_SUMMARY
        echo "| 📈 Performance | ${{ needs.performance-analysis.result }} | Lighthouse CI + Web Vitals |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧹 Code Metrics | ${{ needs.code-metrics.result }} | ESLint + Complexity analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐛 Dependencies | ${{ needs.dependency-analysis.result }} | Audit + License compliance |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Key Insights" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Comprehensive code analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security vulnerabilities identified and reported" >> $GITHUB_STEP_SUMMARY
        echo "- 📈 Performance metrics tracked and optimized" >> $GITHUB_STEP_SUMMARY
        echo "- 🧹 Code quality standards maintained" >> $GITHUB_STEP_SUMMARY
        echo "- 🐛 Dependencies monitored for vulnerabilities" >> $GITHUB_STEP_SUMMARY 